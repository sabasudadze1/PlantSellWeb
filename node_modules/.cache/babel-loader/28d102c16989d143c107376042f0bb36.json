{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Saba/Desktop/PlantsWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loginAttempt),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loginAttemptSaga);\n\nimport { put, takeEvery, call } from \"redux-saga/effects\";\nimport * as constants from \"./constants\";\nimport * as actions from \"./actions\";\nimport * as service from \"../../utils/services\";\nimport { store } from \"../../store\";\nimport { push } from \"react-router-redux\";\nexport function loginAttempt(action) {\n  var params, response;\n  return _regeneratorRuntime.wrap(function loginAttempt$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          params = action.payload.params;\n          _context.prev = 1;\n          _context.next = 4;\n          return put(actions.loading(true));\n\n        case 4:\n          _context.next = 6;\n          return call(service.makePostReq, {\n            url: '/login',\n            data: params\n          });\n\n        case 6:\n          response = _context.sent;\n          _context.next = 9;\n          return put(actions.set(response.data));\n\n        case 9:\n          localStorage.setItem('authToken', JSON.stringify(response.data.token));\n          store.dispatch(push(\"/\"));\n          _context.next = 18;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 17;\n          return put(actions.failure(true, _context.t0.response.data.error));\n\n        case 17:\n          alert(_context.t0.response.data.error);\n\n        case 18:\n          _context.prev = 18;\n          _context.next = 21;\n          return put(actions.loading(false));\n\n        case 21:\n          return _context.finish(18);\n\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 13, 18, 22]]);\n}\nexport function loginAttemptSaga() {\n  return _regeneratorRuntime.wrap(function loginAttemptSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(constants.ATTEMPT, loginAttempt);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport default [loginAttemptSaga()];","map":{"version":3,"sources":["C:/Users/Saba/Desktop/PlantsWeb/src/pages/login/sagas.js"],"names":["loginAttempt","loginAttemptSaga","put","takeEvery","call","constants","actions","service","store","push","action","params","payload","loading","makePostReq","url","data","response","set","localStorage","setItem","JSON","stringify","token","dispatch","failure","error","alert","ATTEMPT"],"mappings":";;oDAOiBA,Y;qDAgBAC,gB;;AAvBjB,SAASC,GAAT,EAAcC,SAAd,EAAwBC,IAAxB,QAAoC,oBAApC;AACA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AACA,OAAO,KAAKC,OAAZ,MAAyB,sBAAzB;AACA,SAAQC,KAAR,QAAoB,aAApB;AACA,SAAQC,IAAR,QAAmB,oBAAnB;AAEA,OAAO,SAAUT,YAAV,CAAuBU,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACIC,UAAAA,MADJ,GACeD,MAAM,CAACE,OADtB,CACID,MADJ;AAAA;AAAA;AAGC,iBAAMT,GAAG,CAACI,OAAO,CAACO,OAAR,CAAgB,IAAhB,CAAD,CAAT;;AAHD;AAAA;AAIkB,iBAAMT,IAAI,CAACG,OAAO,CAACO,WAAT,EAAqB;AAACC,YAAAA,GAAG,EAAC,QAAL;AAAcC,YAAAA,IAAI,EAACL;AAAnB,WAArB,CAAV;;AAJlB;AAIOM,UAAAA,QAJP;AAAA;AAKC,iBAAMf,GAAG,CAACI,OAAO,CAACY,GAAR,CAAaD,QAAQ,CAACD,IAAtB,CAAD,CAAT;;AALD;AAMCG,UAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAeL,QAAQ,CAACD,IAAT,CAAcO,KAA7B,CAAlC;AACAf,UAAAA,KAAK,CAACgB,QAAN,CAAef,IAAI,CAAC,GAAD,CAAnB;AAPD;AAAA;;AAAA;AAAA;AAAA;AAAA;AASC,iBAAMP,GAAG,CAACI,OAAO,CAACmB,OAAR,CAAgB,IAAhB,EAAqB,YAAMR,QAAN,CAAeD,IAAf,CAAoBU,KAAzC,CAAD,CAAT;;AATD;AAUCC,UAAAA,KAAK,CAAC,YAAMV,QAAN,CAAeD,IAAf,CAAoBU,KAArB,CAAL;;AAVD;AAAA;AAAA;AAYC,iBAAMxB,GAAG,CAACI,OAAO,CAACO,OAAR,CAAgB,KAAhB,CAAD,CAAT;;AAZD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBP,OAAO,SAAUZ,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAME,SAAS,CAACE,SAAS,CAACuB,OAAX,EAAoB5B,YAApB,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGP,eAAe,CAACC,gBAAgB,EAAjB,CAAf","sourcesContent":["import { put, takeEvery,call } from \"redux-saga/effects\";\nimport * as constants from \"./constants\";\nimport * as actions from \"./actions\";\nimport * as service from \"../../utils/services\";\nimport {store} from \"../../store\";\nimport {push} from \"react-router-redux\";\n\nexport function* loginAttempt(action) {\n    const {params } = action.payload;\n    try {\n        yield put(actions.loading(true));\n        const response = yield call(service.makePostReq,{url:'/login',data:params});\n        yield put(actions.set( response.data ));\n        localStorage.setItem('authToken', JSON.stringify(response.data.token));\n        store.dispatch(push(\"/\"));\n    } catch (error) {\n        yield put(actions.failure(true,error.response.data.error));\n        alert(error.response.data.error)\n    }finally {\n        yield put(actions.loading(false));\n    }\n}\n\nexport function* loginAttemptSaga() {\n  yield takeEvery(constants.ATTEMPT, loginAttempt);\n}\nexport default [loginAttemptSaga()];\n\n"]},"metadata":{},"sourceType":"module"}