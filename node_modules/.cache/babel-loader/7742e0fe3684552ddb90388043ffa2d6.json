{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Saba/Desktop/PlantsWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(loginAttempt),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(loginAttemptSaga);import{put,takeEvery,call}from\"redux-saga/effects\";import*as constants from\"./constants\";import*as actions from\"./actions\";import*as service from\"../../utils/services\";import{store}from\"../../store\";import{push}from\"react-router-redux\";export function loginAttempt(action){var params,response;return _regeneratorRuntime.wrap(function loginAttempt$(_context){while(1){switch(_context.prev=_context.next){case 0:params=action.payload.params;_context.prev=1;_context.next=4;return put(actions.loading(true));case 4:_context.next=6;return call(service.makePostReq,{url:'/login',data:params});case 6:response=_context.sent;_context.next=9;return put(actions.set(response.data));case 9:localStorage.setItem('authToken',JSON.stringify(response.data.token));store.dispatch(push(\"/\"));_context.next=18;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](1);_context.next=17;return put(actions.failure(true,_context.t0.response.data.error));case 17:alert(_context.t0.response.data.error);case 18:_context.prev=18;_context.next=21;return put(actions.loading(false));case 21:return _context.finish(18);case 22:case\"end\":return _context.stop();}}},_marked,null,[[1,13,18,22]]);}export function loginAttemptSaga(){return _regeneratorRuntime.wrap(function loginAttemptSaga$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeEvery(constants.ATTEMPT,loginAttempt);case 2:case\"end\":return _context2.stop();}}},_marked2);}export default[loginAttemptSaga()];","map":{"version":3,"sources":["C:/Users/Saba/Desktop/PlantsWeb/src/pages/login/sagas.js"],"names":["loginAttempt","loginAttemptSaga","put","takeEvery","call","constants","actions","service","store","push","action","params","payload","loading","makePostReq","url","data","response","set","localStorage","setItem","JSON","stringify","token","dispatch","failure","error","alert","ATTEMPT"],"mappings":"+LAOiBA,Y,iDAgBAC,gB,EAvBjB,OAASC,GAAT,CAAcC,SAAd,CAAwBC,IAAxB,KAAoC,oBAApC,CACA,MAAO,GAAKC,CAAAA,SAAZ,KAA2B,aAA3B,CACA,MAAO,GAAKC,CAAAA,OAAZ,KAAyB,WAAzB,CACA,MAAO,GAAKC,CAAAA,OAAZ,KAAyB,sBAAzB,CACA,OAAQC,KAAR,KAAoB,aAApB,CACA,OAAQC,IAAR,KAAmB,oBAAnB,CAEA,MAAO,SAAUT,CAAAA,YAAV,CAAuBU,MAAvB,2IACIC,MADJ,CACeD,MAAM,CAACE,OADtB,CACID,MADJ,iCAGC,MAAMT,CAAAA,GAAG,CAACI,OAAO,CAACO,OAAR,CAAgB,IAAhB,CAAD,CAAT,CAHD,uBAIkB,MAAMT,CAAAA,IAAI,CAACG,OAAO,CAACO,WAAT,CAAqB,CAACC,GAAG,CAAC,QAAL,CAAcC,IAAI,CAACL,MAAnB,CAArB,CAAV,CAJlB,OAIOM,QAJP,+BAKC,MAAMf,CAAAA,GAAG,CAACI,OAAO,CAACY,GAAR,CAAaD,QAAQ,CAACD,IAAtB,CAAD,CAAT,CALD,OAMCG,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAkCC,IAAI,CAACC,SAAL,CAAeL,QAAQ,CAACD,IAAT,CAAcO,KAA7B,CAAlC,EACAf,KAAK,CAACgB,QAAN,CAAef,IAAI,CAAC,GAAD,CAAnB,EAPD,kGASC,MAAMP,CAAAA,GAAG,CAACI,OAAO,CAACmB,OAAR,CAAgB,IAAhB,CAAqB,YAAMR,QAAN,CAAeD,IAAf,CAAoBU,KAAzC,CAAD,CAAT,CATD,QAUCC,KAAK,CAAC,YAAMV,QAAN,CAAeD,IAAf,CAAoBU,KAArB,CAAL,CAVD,0CAYC,MAAMxB,CAAAA,GAAG,CAACI,OAAO,CAACO,OAAR,CAAgB,KAAhB,CAAD,CAAT,CAZD,8GAgBP,MAAO,SAAUZ,CAAAA,gBAAV,gJACL,MAAME,CAAAA,SAAS,CAACE,SAAS,CAACuB,OAAX,CAAoB5B,YAApB,CAAf,CADK,wDAGP,cAAe,CAACC,gBAAgB,EAAjB,CAAf","sourcesContent":["import { put, takeEvery,call } from \"redux-saga/effects\";\nimport * as constants from \"./constants\";\nimport * as actions from \"./actions\";\nimport * as service from \"../../utils/services\";\nimport {store} from \"../../store\";\nimport {push} from \"react-router-redux\";\n\nexport function* loginAttempt(action) {\n    const {params } = action.payload;\n    try {\n        yield put(actions.loading(true));\n        const response = yield call(service.makePostReq,{url:'/login',data:params});\n        yield put(actions.set( response.data ));\n        localStorage.setItem('authToken', JSON.stringify(response.data.token));\n        store.dispatch(push(\"/\"));\n    } catch (error) {\n        yield put(actions.failure(true,error.response.data.error));\n        alert(error.response.data.error)\n    }finally {\n        yield put(actions.loading(false));\n    }\n}\n\nexport function* loginAttemptSaga() {\n  yield takeEvery(constants.ATTEMPT, loginAttempt);\n}\nexport default [loginAttemptSaga()];\n\n"]},"metadata":{},"sourceType":"module"}